[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qa-intelligence"
version = "1.0.0"
description = "QA Intelligence Chat Agent - AI-powered testing and quality assurance assistant"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "QA Intelligence Team", email = "qa@qai.com"}
]
maintainers = [
    {name = "QA Intelligence Team", email = "qa@qai.com"}
]
keywords = [
    "qa",
    "testing", 
    "quality-assurance",
    "ai-agent",
    "automation",
    "agno",
    "chatbot",
    "intelligence"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Communications :: Chat"
]
requires-python = ">=3.9"
dependencies = [
    "agno>=1.8.0",
    "python-dotenv>=1.0.0",
    "openai>=1.0.0",
    "duckduckgo-search>=5.0.0",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "pydantic[dotenv]>=2.0.0",
    "pyyaml>=6.0.0",
    "ddgs>=1.0.0",
    "sqlalchemy>=2.0.0",
    "loguru>=0.7.0",
    "sqlmodel>=0.0.21",
    "websockets>=12.0",
    "prometheus-client>=0.20.0"
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    
    # Code formatting & linting
    "black>=23.0.0",
    "isort>=5.12.0",
    "pylint>=2.17.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    
    # Development tools
    "pre-commit>=3.3.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0"
]
performance = [
    "psutil>=5.9.0",
    "memory-profiler>=0.60.0"
]
security = [
    "cryptography>=41.0.0",
    "jwt>=1.3.0"
]
all = [
    "qa-intelligence[dev,performance,security]"
]

[project.urls]
Homepage = "https://github.com/qa-intelligence/qa-intelligence"
Documentation = "https://qa-intelligence.readthedocs.io"
Repository = "https://github.com/qa-intelligence/qa-intelligence"
"Bug Tracker" = "https://github.com/qa-intelligence/qa-intelligence/issues"
Changelog = "https://github.com/qa-intelligence/qa-intelligence/blob/main/CHANGELOG.md"

[project.scripts]
qa-agent = "scripts.run_qa_agent:main"
qa-teams = "scripts.demo_qa_teams_integration:main"
qa-memory = "scripts.inspect_memory:main"
qa-demo = "scripts.demo_qa_intelligence:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md"]

# Black - Code formatting
[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.venv
  | \.env
  | _build
  | build
  | dist
  | __pycache__
)/
'''

# isort - Import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "config"]
known_third_party = ["agno", "openai", "fastapi", "pydantic"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# Pylint - Code analysis
[tool.pylint.main]
load-plugins = [
    "pylint.extensions.check_elif",
    "pylint.extensions.bad_builtin",
    "pylint.extensions.docparams",
    "pylint.extensions.for_any_all",
    "pylint.extensions.set_membership",
    "pylint.extensions.code_style",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.typing",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.comparison_placement"
]

[tool.pylint.messages_control]
max-line-length = 88
disable = [
    "C0103",  # Invalid name
    "C0114",  # Missing module docstring
    "C0115",  # Missing class docstring
    "C0116",  # Missing function docstring
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
    "W0621",  # Redefining name from outer scope
]

[tool.pylint.design]
max-args = 10
max-locals = 20
max-returns = 10
max-branches = 15
max-statements = 60
max-parents = 10
max-attributes = 15
min-public-methods = 1
max-public-methods = 25
max-bool-expr = 8

[tool.pylint.exceptions]
overgeneral-exceptions = ["BaseException", "Exception"]

# MyPy - Type checking
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
show_error_codes = true
show_column_numbers = true
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "__pycache__/",
    "tests/"
]

[[tool.mypy.overrides]]
module = [
    "agno.*",
    "ddgs.*",
    "duckduckgo_search.*"
]
ignore_missing_imports = true

# Pytest - Testing framework
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
testpaths = ["tests"]
python_files = [
    "test_*.py",
    "*_test.py"
]
python_classes = [
    "Test*"
]
python_functions = [
    "test_*"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "qa: marks tests related to QA functionality",
    "memory: marks tests related to memory system",
    "teams: marks tests related to teams functionality"
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# Coverage.py
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
    "setup.py"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.coverage.html]
directory = "htmlcov"

# Bandit - Security linting
[tool.bandit]
exclude_dirs = ["tests", "build", "dist", ".venv"]
skips = ["B101", "B601"]

[tool.bandit.assert_used]
skips = ["**/test_*.py", "**/*_test.py"]

# Pre-commit configuration
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version"
]

# Ruff - Fast Python linter (alternative to flake8/pylint)
[tool.ruff]
target-version = "py39"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
]
ignore = [
    "E501",  # line too long (handled by black)
    "S101",  # use of assert
    "T201",  # print statements (allowed for CLI tools)
    "B008",  # function calls in argument defaults
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".env"
]

[tool.ruff.per-file-ignores]
"scripts/*" = ["T201"]  # Allow print in scripts
"tests/*" = ["S101", "ARG"]  # Allow assert and unused args in tests

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["src", "config"]
known-third-party = ["agno", "openai", "fastapi"]

# Documentation with MkDocs
[tool.mkdocs]
site_name = "QA Intelligence Documentation"
site_description = "AI-powered QA testing and quality assurance assistant"
site_author = "QA Intelligence Team"
repo_url = "https://github.com/qa-intelligence/qa-intelligence"
edit_uri = "edit/main/docs/"

# Additional tools configuration
[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
fail-under = 80
exclude = ["setup.py", "docs", "build", "tests"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
