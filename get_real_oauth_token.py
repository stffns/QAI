#!/usr/bin/env python3
"""
Implementaci√≥n REAL del flujo OAuth/OIDC para obtener access tokens v√°lidos
Replica exactamente el comportamiento del c√≥digo Scala original
"""

import sys
import os
import json
import base64
import hashlib
import secrets
import urllib.parse
import uuid
import time
from datetime import datetime, timedelta, timezone
from typing import Dict, Any, Optional

# Agregar el path del proyecto
sys.path.append(os.path.join(os.path.dirname(__file__), ".."))

import requests
from jose import jws

print("üöÄ Iniciando generaci√≥n de ACCESS TOKEN REAL para EVA STA RO...")

class RealOIDCTokenGenerator:
    """
    Generador de tokens OAuth/OIDC REALES
    Implementa el flujo completo equivalente al c√≥digo Scala
    """
    
    def __init__(self):
        
        # Configuraci√≥n EVA STA RO con JWK REAL (del c√≥digo funcional)
        self.config = {
            "env": "sta",
            "country": "ro", 
            "product": "eva",
            "client_id": "84d70f23-df50-4ed2-9d60-263366326c9d",
            "key_id": "SCIK-QA-STA-20210408-47QNY",
            "locale": "ro", 
            # JWK REAL que funciona (del c√≥digo AuthenticationOIDCTemporal)
            "jwk": {
                "kid": "SCIK-QA-STA-20210408-47QNY",
                "kty": "EC",
                "crv": "P-256", 
                "x": "ZI2oM8spmX7hhg0KsWZVyVz3Fq7D7rnT2CISwIJk21U",
                "y": "jJkIyEWLvZSNIcRdAxnFZuYLQCTfng1KMOFNXkJcpS4",
                "d": "6D5xCaPKq1gezZTi93Tu8JKSQqpYRNaoqjdlFVQIF2E"
            },
            "user": {
                "email": "qa.auto.soco.ro+2@gmail.com",
                "password": "Test12345#",
                "given_name": "Qa", 
                "family_name": "Qa",
                "phone_number": "+33663005232",
                "gender": "male"  # Como en el JSON ejemplo
            },
            "oidc_domain": "connect.sta.pluxee.app",
            "issuer": "https://connect.sta.pluxee.app/op",
            "callback_url": "http://localhost/oidc/callback",
            "needs_resource_param": False
        }
    
    def get_provider_metadata(self) -> Dict[str, Any]:
        """Obtiene metadatos del proveedor OIDC usando requests"""
        url = f"{self.config['issuer']}/.well-known/openid-configuration"
        print(f"üîç Obteniendo metadatos OIDC de: {url}")
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            metadata = response.json()
            
            print(f"‚úÖ Metadatos obtenidos:")
            print(f"   ‚Ä¢ Authorization endpoint: {metadata.get('authorization_endpoint', 'N/A')}")
            print(f"   ‚Ä¢ Token endpoint: {metadata.get('token_endpoint', 'N/A')}")
            
            return metadata
            
        except Exception as e:
            print(f"‚ùå Error obteniendo metadatos: {e}")
            raise
    
    def generate_pkce(self) -> Dict[str, str]:
        """Genera c√≥digos PKCE para el flujo OAuth"""
        print("üîê Generando c√≥digos PKCE...")
        
        # Code verifier: random 43-128 caracteres
        code_verifier = base64.urlsafe_b64encode(secrets.token_bytes(32)).decode('utf-8').rstrip('=')
        
        # Code challenge: SHA256 del verifier
        digest = hashlib.sha256(code_verifier.encode('utf-8')).digest()
        code_challenge = base64.urlsafe_b64encode(digest).decode('utf-8').rstrip('=')
        
        print(f"‚úÖ PKCE generado:")
        print(f"   ‚Ä¢ Code verifier: {code_verifier[:20]}...")
        print(f"   ‚Ä¢ Code challenge: {code_challenge[:20]}...")
        
        return {
            "code_verifier": code_verifier,
            "code_challenge": code_challenge
        }
    
    def generate_impersonation_token(self, auth_endpoint: str) -> str:
        """
        Genera token de impersonaci√≥n usando jose.jws exactamente como AuthenticationOIDCTemporal
        """
        print("üé≠ Generando token de impersonaci√≥n JWT con JWK REAL...")
        
        # Payload exacto del c√≥digo funcional (sin password)
        payload = {
            "jti": str(uuid.uuid4()),
            "aud": auth_endpoint,
            "exp": int(time.time()) + 60,  # 60 segundos como en tu c√≥digo
            "action": "sign-in",
            "account": {
                "email": self.config["user"]["email"],
                "realm": self.config["country"], 
                "gender": self.config["user"]["gender"],
                "given_name": self.config["user"]["given_name"],
                "family_name": self.config["user"]["family_name"],
                "locale": self.config["locale"],
                "phone_number": self.config["user"]["phone_number"]
            }
        }
        
        # Headers con key ID
        headers = {"kid": self.config["key_id"]}
        
        print(f"   üîë Key ID: {self.config['key_id']}")
        print(f"   üë§ Usuario: {self.config['user']['email']}")
        print(f"   üåç Realm: {self.config['country']}")
        
        try:
            # Usar jose.jws.sign con JWK real como en tu c√≥digo funcional
            token = jws.sign(payload, self.config["jwk"], algorithm="ES256", headers=headers)
            print(f"‚úÖ Token de impersonaci√≥n REAL generado: {token[:50]}...")
            return token
            
        except Exception as e:
            print(f"‚ùå Error generando token real: {e}")
            raise
    
    def build_authorization_url(self, authorization_endpoint: str, pkce: Dict[str, str], state: Optional[str] = None) -> str:
        """Construye URL de autorizaci√≥n OAuth"""
        print("üîó Construyendo URL de autorizaci√≥n...")
        
        params = {
            "response_type": "code",
            "client_id": self.config["client_id"],
            "redirect_uri": self.config["callback_url"],
            "scope": "openid profile email",
            "code_challenge": pkce["code_challenge"],
            "code_challenge_method": "S256",
        }
        
        if state:
            params["state"] = state
        
        query_string = urllib.parse.urlencode(params)
        auth_url = f"{authorization_endpoint}?{query_string}"
        
        print(f"‚úÖ URL de autorizaci√≥n: {auth_url[:100]}...")
        return auth_url
    
    def get_authorization_code_real(self, auth_url: str, impersonation_token: str) -> str:
        """
        Obtiene el c√≥digo de autorizaci√≥n usando requests exactamente como AuthenticationOIDCTemporal
        """
        print("üåê Obteniendo c√≥digo de autorizaci√≥n REAL con requests...")
        print(f"   üç™ Token de impersonaci√≥n: {impersonation_token[:50]}...")
        
        # Crear sesi√≥n con cookie exactamente como tu c√≥digo funcional
        session = requests.Session()
        session.cookies.set(
            "sc_impersonation_token", 
            impersonation_token, 
            domain=self.config["oidc_domain"], 
            path="/op"
        )
        session.max_redirects = 5
        
        print(f"   üîó URL inicial: {auth_url[:80]}...")
        
        # Seguir redirects exactamente como follow_oidc_redirects() - sin l√≠mite como en tu c√≥digo
        current_url = auth_url
        redirect_count = 0
        max_redirects = 50  # Aumentar l√≠mite significativamente
        
        while not current_url.startswith(self.config["callback_url"]) and redirect_count < max_redirects:
            print(f"   üîÑ Redirect #{redirect_count + 1}")
            
            response = session.get(current_url, allow_redirects=False)
            status = response.status_code
            
            print(f"   üìä Status: {status}")
            
            if status in [301, 302, 303]:
                location = response.headers.get("Location")
                if not location:
                    raise Exception("Redirect without Location header")
                
                # Manejar URLs relativas
                if not location.startswith("http"):
                    from urllib.parse import urlparse, urljoin
                    base_url = f"https://{urlparse(auth_url).netloc}"
                    current_url = urljoin(base_url, location)
                else:
                    current_url = location
                
                print(f"   ‚ÜóÔ∏è  Redirect a: {current_url[:60]}...")
                redirect_count += 1
            else:
                print(f"   ‚ùå Status inesperado: {status}")
                print(f"   üìÑ Response: {response.text[:200]}")
                raise Exception(f"Unexpected status code: {status}")
        
        if redirect_count >= max_redirects:
            raise Exception(f"Too many redirects ({max_redirects})")
        
        # Extraer c√≥digo del callback URL
        print(f"   üéØ ¬°Llegamos al callback URL!")
        from urllib.parse import urlparse, parse_qs
        parsed_url = urlparse(current_url)
        query_params = parse_qs(parsed_url.query)
        
        if "code" not in query_params:
            raise Exception("Authorization code not found in redirect URL")
        
        code = query_params["code"][0]
        print(f"   ‚úÖ C√≥digo extra√≠do: {code[:20]}...")
        return code
    
    def exchange_code_for_tokens(self, token_endpoint: str, authorization_code: str, pkce: Dict[str, str]) -> Dict[str, Any]:
        """
        Intercambia authorization code por access token usando requests como AuthenticationOIDCTemporal
        """
        print("üí± Intercambiando c√≥digo por tokens...")
        
        try:
            # Datos para el intercambio exactos del c√≥digo funcional
            data = [
                ("grant_type", "authorization_code"),
                ("code", authorization_code),
                ("client_id", self.config["client_id"]),
                ("redirect_uri", self.config["callback_url"]),
                ("code_verifier", pkce["code_verifier"]),
            ]
            
            # Agregar resource si es necesario
            if (self.config["env"] == "sta" and self.config["product"] == "one-app") or self.config["product"] == "m-app":
                data.append(("resource", "https://api.sta.pluxee.app"))
            
            print(f"   üì§ Enviando request a: {token_endpoint}")
            
            headers = {"Content-Type": "application/x-www-form-urlencoded"}
            
            response = requests.post(token_endpoint, data=data, headers=headers, timeout=10)
            response.raise_for_status()
            
            tokens = response.json()
            print(f"   ‚úÖ Tokens obtenidos exitosamente!")
            print(f"   ‚Ä¢ Access token: {tokens.get('access_token', 'N/A')[:50]}...")
            print(f"   ‚Ä¢ Token type: {tokens.get('token_type', 'N/A')}")
            print(f"   ‚Ä¢ Expires in: {tokens.get('expires_in', 'N/A')} segundos")
            
            return tokens
                
        except Exception as e:
            print(f"   ‚ùå Error intercambiando c√≥digo: {e}")
            raise
    
    def get_real_access_token(self) -> str:
        """
        M√©todo principal - obtiene access token real
        Equivalente completo a OIDCAuthentication.getAccessToken() del c√≥digo Scala
        """
        print("\n" + "="*70)
        print("üéØ GENERANDO ACCESS TOKEN REAL - EVA STA RO")
        print("="*70)
        print("Replicando: OIDCAuthentication(\"sta\", \"ro\", \"eva\").getAccessToken()")
        print("="*70)
        
        try:
            # Paso 1: Obtener metadatos del proveedor
            metadata = self.get_provider_metadata()
            
            # Paso 2: Generar PKCE
            pkce = self.generate_pkce()
            
            # Paso 3: Generar token de impersonaci√≥n
            impersonation_token = self.generate_impersonation_token(
                metadata["authorization_endpoint"]
            )
            
            # Paso 4: Construir URL de autorizaci√≥n
            auth_url = self.build_authorization_url(
                metadata["authorization_endpoint"],
                pkce,
                secrets.token_urlsafe(16)
            )
            
            # Paso 5: Obtener authorization code REAL
            authorization_code = self.get_authorization_code_real(
                auth_url, 
                impersonation_token
            )
            
            # Paso 6: Intercambiar c√≥digo por tokens
            tokens = self.exchange_code_for_tokens(
                metadata["token_endpoint"],
                authorization_code,
                pkce
            )
            
            access_token = tokens["access_token"]
            
            print("\n" + "="*70)
            print("‚úÖ ACCESS TOKEN REAL OBTENIDO!")
            print("="*70)
            print(f"üéØ Token: {access_token}")
            print(f"\nüìä Informaci√≥n del token:")
            print(f"   ‚Ä¢ Tipo: {tokens.get('token_type', 'Bearer')}")
            print(f"   ‚Ä¢ Expira en: {tokens.get('expires_in', 'N/A')} segundos")
            print(f"   ‚Ä¢ Scopes: {tokens.get('scope', 'N/A')}")
            print(f"\nüîß Configuraci√≥n utilizada:")
            print(f"   ‚Ä¢ Ambiente: {self.config['env'].upper()}")
            print(f"   ‚Ä¢ Pa√≠s: {self.config['country'].upper()}")
            print(f"   ‚Ä¢ Producto: {self.config['product'].upper()}")
            print(f"   ‚Ä¢ Usuario: {self.config['user']['email']}")
            print(f"   ‚Ä¢ Client ID: {self.config['client_id']}")
            
            return access_token
            
        except Exception as e:
            print(f"\n‚ùå ERROR OBTENIENDO TOKEN REAL: {e}")
            import traceback
            traceback.print_exc()
            raise
        
        finally:
            # No necesario con requests
            pass

def main():
    """Funci√≥n principal para obtener token real"""
    try:
        generator = RealOIDCTokenGenerator()
        access_token = generator.get_real_access_token()
        
        print(f"\nüöÄ LISTO PARA USAR EN GATLING:")
        print(f"Authorization: Bearer {access_token}")
        
        return access_token
        
    except Exception as e:
        print(f"üí• Error: {e}")
        return None

if __name__ == "__main__":
    # Instalar dependencias si no est√°n
    try:
        import jwt
        import cryptography
    except ImportError:
        print("üì¶ Instalando dependencias necesarias...")
        os.system("pip install PyJWT cryptography")
        import jwt
        import cryptography
    
    main()
